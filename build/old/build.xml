<?xml version="1.0" encoding="UTF-8"?>

<project name="difra" default="build-cli">

	<!-- Thanks jenkins-php.org! -->

	<property name="pdepend" value="pdepend"/>
	<property name="phpcpd"  value="phpcpd"/>
	<property name="phpcs"   value="phpcs"/>
	<property name="phpdox"  value="phpdox"/>
	<property name="phploc"  value="phploc"/>
	<property name="phpmd"   value="phpmd"/>
	<property name="phpunit" value="phpunit"/>

	<target name="build-cli"
		depends="prepare,lint,phpunit"
		description="Performs static analysis, runs the tests, and generates project documentation (cli)"/>

	<target name="build-ci"
		depends="prepare,static-analysis,phpunit-ci,phpdox"
		description="Performs static analysis, runs the tests, and generates project documentation (ci)"/>

	<target name="build-parallel"
		depends="prepare,static-analysis-parallel,phpunit-ci,phpdox"
		description="Performs static analysis (executing the tools in parallel), runs the tests, and generates project documentation"/>

	<target name="static-analysis"
		depends="lint,phploc-ci,pdepend,phpmd-ci,phpcs-ci,phpcpd-ci"
		description="Performs static analysis" />

	<!-- Adjust the threadCount attribute's value to the number of CPUs -->
	<target name="static-analysis-parallel"
		description="Performs static analysis (executing the tools in parallel)">
		<parallel threadCount="2">
			<sequential>
				<antcall target="pdepend"/>
				<antcall target="phpmd-ci"/>
			</sequential>
			<antcall target="lint"/>
			<antcall target="phpcpd-ci"/>
			<antcall target="phpcs-ci"/>
			<antcall target="phploc-ci"/>
		</parallel>
	</target>

	<target name="clean"
		unless="clean.done"
		description="Cleanup build artifacts">
		<delete dir="${basedir}/api"/>
		<delete dir="${basedir}/coverage"/>
		<delete dir="${basedir}/logs"/>
		<delete dir="${basedir}/pdepend"/>
		<delete dir="${basedir}/phpdox"/>
		<property name="clean.done" value="true"/>
	</target>

	<target name="prepare"
		unless="prepare.done"
		depends="clean"
		description="Prepare for build">
		<mkdir dir="${basedir}/api"/>
		<mkdir dir="${basedir}/coverage"/>
		<mkdir dir="${basedir}/logs"/>
		<mkdir dir="${basedir}/pdepend"/>
		<mkdir dir="${basedir}/phpdox"/>
		<property name="prepare.done" value="true"/>
	</target>

	<target name="lint"
		unless="lint.done"
		description="Perform syntax check of sourcecode files">
		<apply executable="php" taskname="lint">
			<arg value="-l"/>
			<fileset dir="${basedir}/..">
				<include name="**/*.php"/>
				<exclude name="**/fw/lib/Libs/ESAPI/**"/>
				<exclude name="**/fw/lib/Libs/Less/**"/>
				<exclude name="**/old-plugins/**"/>
				<exclude name="**/tests/**"/>
				<modified/>
			</fileset>
		</apply>
		<property name="lint.done" value="true"/>
	</target>

	<target name="phploc"
		unless="phploc.done"
		description="Measure project size using PHPLOC and print human readable output. Intended for usage on the command line.">
		<exec executable="${phploc}" taskname="phploc">
			<arg value="--count-tests" />
			<arg value="--exclude"/>
			<arg value="${basedir}/../fw/lib/Libs/ESAPI/"/>
			<arg value="--exclude"/>
			<arg value="${basedir}/../fw/lib/Libs/Less/"/>
			<arg value="--exclude"/>
			<arg value="${basedir}/../tests/"/>
			<arg value="--exclude"/>
			<arg value="${basedir}/../old-plugins/"/>
			<arg path="${basedir}/.."/>
		</exec>
		<property name="phploc.done" value="true"/>
	</target>

	<target name="phploc-ci"
		unless="phploc.done"
		depends="prepare"
		description="Measure project size using PHPLOC and log result in CSV and XML format. Intended for usage within a continuous integration environment.">
		<exec executable="${phploc}" taskname="phploc">
			<arg value="--count-tests" />
			<arg value="--log-csv" />
			<arg path="${basedir}/logs/phploc.csv" />
			<arg value="--exclude"/>
			<arg value="${basedir}/../fw/lib/Libs/ESAPI/"/>
			<arg value="--exclude"/>
			<arg value="${basedir}/../fw/lib/Libs/Less/"/>
			<arg value="--exclude"/>
			<arg value="${basedir}/../tests/"/>
			<arg value="--exclude"/>
			<arg value="${basedir}/../old-plugins/"/>
			<arg path="${basedir}/.."/>
		</exec>
		<property name="phploc.done" value="true"/>
	</target>

	<target name="pdepend"
		depends="prepare"
		unless="pdepend.done"
		description="Calculate software metrics using PHP_Depend and log result in XML format. Intended for usage within a continuous integration environment.">
		<exec executable="${pdepend}" taskname="pdepend">
			<arg value="--jdepend-xml=${basedir}/logs/jdepend.xml"/>
			<arg value="--jdepend-chart=${basedir}/pdepend/dependencies.svg"/>
			<arg value="--overview-pyramid=${basedir}/pdepend/overview-pyramid.svg"/>
			<arg value="--ignore=fw/lib/Libs/ESAPI,fw/lib/Libs/Less,tests,old-plugins"/>
			<arg path="${basedir}/.."/>
		</exec>
		<property name="pdepend.done" value="true"/>
	</target>

	<target name="phpmd"
		unless="phpmd.done"
		description="Perform project mess detection using PHPMD and print human readable output. Intended for usage on the command line before committing.">
		<exec executable="${phpmd}" taskname="phpmd">
			<arg path="${basedir}/.."/>
			<arg value="text"/>
			<arg value="${basedir}/phpmd.xml"/>
			<arg value="--exclude"/>
			<arg path="${basedir}/../fw/lib/Libs/ESAPI,${basedir}/../fw/lib/Libs/Less,${basedir}/../tests,${basedir}/../old-plugins/"/>
		</exec>
		<property name="phpmd.done" value="true"/>
	</target>

	<target name="phpmd-ci"
		unless="phpmd.done"
		depends="prepare"
		description="Perform project mess detection using PHPMD and log result in XML format. Intended for usage within a continuous integration environment.">
		<exec executable="${phpmd}" taskname="phpmd">
			<arg path="${basedir}/.."/>
			<arg value="xml"/>
			<arg value="${basedir}/phpmd.xml"/>
			<arg value="--reportfile"/>
			<arg value="${basedir}/logs/pmd.xml"/>
			<arg value="--exclude"/>
			<arg path="${basedir}/../fw/lib/Libs/ESAPI,${basedir}/../fw/lib/Libs/Less,${basedir}/../tests,${basedir}/../old-plugins"/>
		</exec>
		<property name="phpmd.done" value="true"/>
	</target>

	<target name="phpcs"
		unless="phpcs.done"
		description="Find coding standard violations using PHP_CodeSniffer and print human readable output. Intended for usage on the command line before committing.">
		<exec executable="${phpcs}" taskname="phpcs">
			<arg value="--standard=${basedir}/phpcs.xml"/>
			<arg value="--extensions=php" />
			<arg path="${basedir}/.."/>
		</exec>
		<property name="phpcs.done" value="true"/>
	</target>

	<target name="phpcs-ci"
		unless="phpcs.done"
		depends="prepare"
		description="Find coding standard violations using PHP_CodeSniffer and log result in XML format. Intended for usage within a continuous integration environment.">
		<exec executable="${phpcs}" taskname="phpcs">
			<arg value="--report=checkstyle"/>
			<arg value="--report-file=${basedir}/logs/checkstyle.xml"/>
			<arg value="--standard=${basedir}/phpcs.xml"/>
			<arg value="--extensions=php"/>
			<arg path="${basedir}/.."/>
		</exec>
		<property name="phpcs.done" value="true"/>
	</target>

	<target name="phpcpd"
		unless="phpcpd.done"
		description="Find duplicate code using PHPCPD and print human readable output. Intended for usage on the command line before committing.">
		<exec executable="${phpcpd}" taskname="phpcpd">
			<arg value="--exclude"/>
			<arg value="fw/lib/Libs/ESAPI"/>
			<arg value="--exclude"/>
			<arg value="fw/lib/Libs/Less"/>
			<arg value="--exclude"/>
			<arg value="tests"/>
			<arg value="--exclude"/>
			<arg value="old-plugins"/>
			<arg path="${basedir}/.."/>
		</exec>
		<property name="phpcpd.done" value="true"/>
	</target>

	<target name="phpcpd-ci"
		depends="prepare"
		unless="phpcpd.done"
		description="Find duplicate code using PHPCPD and log result in XML format. Intended for usage within a continuous integration environment.">
		<exec executable="${phpcpd}" taskname="phpcpd">
			<arg value="--log-pmd"/>
			<arg value="${basedir}/logs/pmd-cpd.xml"/>
			<arg value="--exclude"/>
			<arg value="fw/lib/Libs/ESAPI"/>
			<arg value="--exclude"/>
			<arg value="fw/lib/Libs/Less"/>
			<arg value="--exclude"/>
			<arg value="tests"/>
			<arg value="--exclude"/>
			<arg value="old-plugins"/>
			<arg path="${basedir}/.."/>
		</exec>
		<property name="phpcpd.done" value="true"/>
	</target>

	<target name="phpunit"
		unless="phpunit.done"
		description="Run unit tests with PHPUnit">
		<exec executable="${phpunit}" resultproperty="result.phpunit" taskname="phpunit">
			<arg value="--configuration"/>
			<arg path="${basedir}/phpunit.xml"/>
		</exec>
		<property name="phpunit.done" value="true"/>
	</target>

	<target name="phpunit-ci"
		unless="phpunit.done"
		depends="prepare"
		description="Run unit tests with PHPUnit (without generating code coverage reports)">
		<exec executable="${phpunit}" failonerror="true" taskname="phpunit">
			<arg value="--configuration"/>
			<arg path="${basedir}/phpunit.xml"/>
			<arg value="--coverage-html"/>
			<arg path="${basedir}/coverage"/>
			<arg value="--coverage-clover"/>
			<arg path="${basedir}/logs/clover.xml"/>
			<arg value="--coverage-crap4j"/>
			<arg path="${basedir}/logs/crap4j.xml"/>
			<arg value="--log-junit"/>
			<arg path="${basedir}/logs/junit.xml"/>
		</exec>
		<property name="phpunit.done" value="true"/>
	</target>

	<target name="phpdox"
		unless="phpdox.done"
		depends="phploc-ci,phpcs-ci,phpmd-ci"
		description="Generate project documentation using phpDox">
		<exec executable="${phpdox}" dir="${basedir}" taskname="phpdox"/>
		<property name="phpdox.done" value="true"/>
	</target>

	<target name="-check-failure">
		<fail message="PHPUnit did not finish successfully">
			<condition>
				<not>
					<equals arg1="${result.phpunit}" arg2="0"/>
				</not>
			</condition>
		</fail>
	</target>
</project>
